- В стиле тестирования с проверкой выходных данных в тестируемую систему (SUT) подаются входные данные,
после чего проверяются полученные резуль- таты. Этот стиль юнит-тестирования предполагает отсутствие скрытых входных и
выходных данных, поэтому единственным результатом работы тестируемой системы становится возвращаемое ею значение.

- Тестирование на основании состояния проверяет состояние системы после завершения операции.

- При тестировании взаимодействий тесты используют моки для проверки взаимодействий между тестируемой системой и ее коллабораторами.

- Классическая школа юнит-тестирования отдает предпочтение проверкам состояния, а не проверкам взаимодействий.
Лондонская школа поступает наоборот. Проверка выходных данных используется обеими школами

- Тестирование выходных данных производит тесты наивысшего качества. Такие тесты редко завязываются на детали имплементации,
а следовательно, устойчивы к рефакторингу. Они также компактны, а значит, обладают наилучшей сопровождаемостью.

- Тестирование состояния требует дополнительных мер для предотвращения хрупкости тестов: вы должны следить за тем, чтобы
не раскрыть приватное состояние. Так как тесты, проверяющие состояние, обычно имеют больший размер, чем тесты,
проверяющие выходные данные, они также создают больше проблем с сопровож- дением. Проблемы сопровождения иногда можно
преодолеть (но не исключить) использованием вспомогательных методов и объектов-значений.

- Тестирование взаимодействий также требует дополнительных мер для предотвращения хрупкости тестов. Проверяйте только
те взаимодействия, которые выходят за границу приложения и результаты работы которых видны внешнему миру.
Тесты, проверяющие взаимодействия, уступают по сопровождаемости те- стам, проверяющим выходные данные или состояние.
Моки обычно занимают много места, что затрудняет чтение тестов.

- Функциональное программирование — программирование с использованием математических функций.

- Математическая функция — это функция (или метод), не имеющая никаких скрытых входных или выходных данных.
Побочные эффекты и исключения являются скрытыми выходными данными. Ссылки на внутреннее или внешнее состояние являются
скрытыми входными данными. Прямота и открытость математических функций делает их в высшей степени подходящими для юнит-тестирования.

- Цель функционального программирования — отделение бизнес-логики от побочных эффектов.

- Функциональная архитектура помогает достичь такого разделения выведением побочных эффектов на границы бизнес-операций.
Такой подход максимизирует объем кода, написанного в чисто функциональном стиле, одновременно сводя к минимуму код,
работающий с побочными эффектами.

- Функциональная архитектура делит весь код на две категории: функциональное ядро и изменяемая оболочка.
Функциональное ядро принимает решения. Изменяемая оболочка поставляет входные данные функциональному ядру и преобразует
решения, принимаемые ядром, в побочные эффекты.

- Различие между функциональной и гексагональной архитектурами проявляются в их отношении к побочным эффектам.
Функциональная архитектура вытесняет все побочные эффекты за границы слоя предметной области. С другой стороны,
гексагональная архитектура не возражает против побочных эффектов, произво- димых слоем предметной области, при условии
что они ограничиваются только этим слоем предметной области. Функциональную архитектуру можно рассма- тривать как
гексагональную архитектуру, возведенную в абсолют.

- Выбор между функциональной и более традиционной архитектурой означает компромисс между быстродействием и сопровождаемостью кода.
Функциональная архитектура жертвует быстродействием ради улучшенной сопровождаемости.

- Применение функциональной архитектуры оправданно не для всех кодовых баз. Всегда применяйте функциональную архитектуру
стратегически, учитывая сложность и важность вашей системы. Если кодовая база слишком проста или не настолько важна,
начальные вложения, необходимые для функциональной архитектуры, не окупятся.