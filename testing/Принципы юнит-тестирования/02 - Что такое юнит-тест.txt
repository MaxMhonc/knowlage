- Юнит-тест:
    • проверяет правильность работы одной единицы поведения;
    • делает это быстро
    • и в изоляции от других тестов.

- Больше всего разногласий вызывает аспект изоляции. Эти разногласия привели к формированию двух школ юнит-тестирования:
классической (детройтской) и лондонской (мокистской). Различия во взглядах на изоляцию также влияют на представления о том,
что собой представляет юнит, а также как нужно работать с зависимостями тестируемой системы.
    • Лондонская школа считает, что изолированы друг от друга должны быть юниты (units under test) — единицы кода,
    чаще всего класс. Все его зависи- мости, за исключением неизменяемых, должны быть заменены тестовыми заглушками в тестах.
    • Классическая школа считает, что изолированы друг от друга должны быть сами юнит-тесты, а не юниты.
    Кроме того, тестируется единица поведения, а не единица кода. Таким образом, только совместные (shared)
    зависимости должны заменяться тестовыми заглушками. Совместными называются зависимости, предоставляющие тестам
    возможность влиять на результаты друг друга.

- Основные преимущества лондонской школы — улучшенная детализация, простота тестирования больших графов взаимосвязанных
классов и простота на- хождения функциональности, содержащей ошибку, при отказе теста.

- Преимущества лондонской школы на первый взгляд кажутся привлекательными. Тем не менее они создают ряд потенциальных проблем.
Во-первых, концентрация на единицах кода ошибочна: тесты должны проверять единицы поведения, а не кода.
Кроме того, невозможность юнит-тестирования фрагмента кода является хорошим показателем проблем с кодом.
Тестовые заглушки не ре- шают эти проблемы, а только скрывают их. И наконец, хотя простота нахождения ошибочного кода полезна,
это, как правило, не является серьезной проблемой для классической школы, так как вы почти всегда знаете,
что вызвало ошибку, — это тот код, который вы редактировали последним.

- Самой большой проблемой лондонской школы юнит-тестирования является проблема излишней спецификации —
привязка тестов к деталям имплементации тестируемой системы.

- Интеграционный тест — это тест, который не удовлетворяет как минимум одному критерию юнит-теста.
Сквозные (end-to-end) тесты составляют под- множество интеграционных тестов; они проверяют систему с точки зрения
конечного пользователя. Сквозные тесты обращаются напрямую ко всем или почти ко всем внепроцессным зависимостям,
с которыми работает ваше при- ложение.

- Канонический источник информации по классическому стилю — книга Кента Бека (Kent Beck) «Test-Driven Development: By Example»1.
За информацией о лондонском стиле обращайтесь к книге «Growing Object-Oriented Software, Guided by Tests»
Стива Фримена (Steve Freeman) и Ната Прайса (Nat Pryce). По теме управления зависимостями я рекомендую книгу
«Dependency Injection: Principles, Practices, Patterns» Стивена ван Дьюрзена (Steven van Deursen) и Мар- ка Симана (Mark Seemann)2.
