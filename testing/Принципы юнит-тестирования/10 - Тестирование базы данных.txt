- Храните схему базы данных в системе контроля версий наряду с вашим исходным кодом. Схема базы данных состоит из таблиц,
представлений, индексов, хранимых процедур и вообще всего, что составляет описание построения базы данных.

- Справочные данные также являются частью схемы базы данных. Эти данные должны быть предварительно заполнены, чтобы
приложение могло нормально функционировать. Чтобы отличить справочные данные от обычных, определите, может ли ваше
приложение изменить эти данные. Если может — это обычные данные; в противном случае это справочные данные.

- Создайте отдельный экземпляр базы данных для каждого разработчика. Еще лучше, если этот экземпляр будет размещаться
на машине разработчика для максимальной скорости выполнения тестов.

- Метод развертывания базы данных на основе состояния явно выражает состояние и позволяет утилите сравнения неявно
управлять миграциями. Метод на основе миграций ориентирован на использование явных миграций, переводящих базу данных из
одного состояния в другое. Явность состояния БД упрощает обработку конфликтов слияния, тогда как явные миграции помогают
с трансформацией данных.

- Отдавайте предпочтение методу на основе миграций, а не методу на основе состояния, потому что обработка трансформаций
данных намного важнее конфликтов слияния. Применяйте все модификации к схеме базы данных (включая справочные данные)
посредством миграций.

- Бизнес-операции должны обновлять данные атомарно. Для обеспечения атомарности положитесь на механизм транзакций
используемой базы данных.

- Используйте паттерн unit of work там, где это возможно. Unit of work полагается на транзакции используемой базы данных.
Этот паттерн также откладывает все обновления до конца бизнес-операции, что способствует повышению быстродействия.

- Не переиспользуйте транзакции или экземпляры unit of work между секциями теста. Каждая секция подготовки, действия и
проверки должна содержать собственную транзакцию или экземпляр unit of work.

- Выполняйте интеграционные тесты последовательно. Параллельное выполнение требует значительных усилий, которые обычно неоправданны.

- Проводите очистку тестовых данных в начале теста. Такое решение отрабатывает быстро, позволяет протестировать код в
окружении, близком к продуктиву, и не может пропустить фазу очистки. С этим методом вам также не придется вводить
отдельную фазу деинициализации (teardown).

- Избегайте баз данных в памяти (таких как SQLite). Вы никогда не обеспечите хорошей защиты, если ваши тесты будут
тестировать базу данных другого вендора. Используйте в тестах ту же систему управления базами данных, что и в рабочей версии.

- Для сокращения размера тестов выделите несущественные части в приватные методы или вспомогательные классы:
    • для секции подготовки используйте паттерн Object Mother, а не Test Data Builder;
    • для секции действия создайте метод-декоратор;
    • для секции проверки используйте fluent-интерфейс.

- Порог для тестирования операций чтения должен быть выше, чем для операций записи. Тестируйте только самые сложные или
важные операции чтения; остальные можно игнорировать.

- Не тестируйте репозитории напрямую, только как часть общих интеграционных тестов. Тесты репозиториев создают слишком
высокие затраты на сопровождение при слишком незначительном выигрыше в защите от багов.