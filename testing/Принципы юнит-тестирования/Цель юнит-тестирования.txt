- Код проекта становится хуже по мере роста проекта. Каждый раз, когда вы что-то изменяете в коде,
возрастает ее энтропия, или степень беспорядка в ней. Если не принять должных мер (таких, как постоянная чистка и рефакторинг),
система непрерывно усложняется и дезорганизуется. Тесты помогают справиться с этой тенденцией.
Они становятся своего рода «подушкой безопасности» — средством, которое обеспечивает защиту от багов.

- Писать юнит-тесты важно. Не менее важно писать хорошие юнит-тесты. Проекты с плохими тестами и проекты без тестов
вообще приходят к одинаковому результату: либо стагнация, либо множество багов с каждым новым релизом.

- Целью юнит-тестирования является обеспечение стабильного роста проекта. Хорошие юнит-тесты помогают предотвратить стагнацию
и сохранить темп разработки со временем. С такими тестами вы будете уверены в том, что изменения не приведут к багам.
В свою очередь, это упростит рефакторинг кода или добавление новой функциональности.

- Не все тесты одинаково полезны. С каждым тестом связаны плюсы и минусы, которые необходимо тщательно оценивать.
Включайте в проект только наиболее эффективные тесты и избавляйтесь от всех остальных.
И код приложения, и код тестов — обязательство, а не актив (liabilities, not assets).

- Возможность покрытия кода юнит-тестами — хороший критерий оценки качества этого кода, но он работает только в одном направлении.
Это хороший негативный признак (если юнит-тестирование кода невозможно, значит, это код плохого качества),
но плохой позитивный признак (возможность юнит-тестирования кода не гарантирует качество этого кода).

- Аналогичным образом метрики покрытия служат хорошим негативным, но плохим позитивным признаком.
Низкий процент покрытия — хороший признак проблем с тестами, но высокий процент покрытия еще не означает высокого качества тестов.

- Branch coverage предоставляет более качественную информацию о полноте тестов, чем code coverage,
но по нему все равно нельзя судить о том, достаточно хороши ваши тесты или нет.
Ни одна из метрик покрытия не учитывает наличия проверок (assertions) и ветвей выполнения в сторонних библиотеках,
используемых в вашем проекте.

- Установление конкретного процента покрытия как цели создает неправильный стимул. Обеспечивать
высокий процент покрытия для основных частей вашей системы хорошо, но не следует превращать этот высокий процент в требование.

- Успешные тесты обладают следующими свойствами:
    • интегрирован в цикл разработки;
    • проверяет только самые важные части вашего кода;
    • дает максимальную защиту от багов с минимальными затратами на сопровождение.

- Чтобы добиться цели юнит-тестирования (то есть обеспечить стабильный рост проекта), необходимо:
    • научиться отличать хорошие тесты от плохих;
    • научиться рефакторить тесты для повышения их качества.