- Раскрытие приватных методов ради юнит-тестирования приводит к привязке тестов к деталям имплементации и в конечном
итоге снижает устойчивость тестов к рефакторингу. Вместо того чтобы тестировать приватные методы напрямую, тестируйте их
косвенно, как часть наблюдаемого поведения.

- Если приватный метод слишком сложен для того, чтобы тестироваться как часть открытого API, в котором он используется,
это указывает на недостающую абстракцию. Выделите эту абстракцию в отдельный класс, вместо того чтобы делать приватный
метод публичным.

- В редких случаях приватные методы принадлежат наблюдаемому поведению класса. Такие методы обычно являются контрактом
между классом и ORM- библиотекой или фабрикой.

- Не раскрывайте состояние, которое вы бы без этого предпочли оставить приватным, только ради юнит-тестирования.
Ваши тесты должны взаимодействовать с тестируемой системой в точности так же, как и рабочий код; они не должны иметь особых привилегий.

- Не ориентируйтесь ни на какую конкретную реализацию при написании тестов. Проверяйте рабочий код с точки зрения «черного ящика»;
избегайте утечки знаний предметной области в тесты (за дополнительной информацией о тестировании методами «черного ящика»
и «белого ящика» обращайтесь к главе 4).

- Загрязнение кода — добавление рабочего кода, который необходим только для тестирования. Это антипаттерн, потому что код
тестов смешивается с рабочим кодом, что повышает затраты на сопровождение последнего.

- Необходимость в мокировании конкретного класса для сохранения части его функциональности является результатом нарушения
принципа единственной ответственности. Разделите этот класс на два: один содержит логику предметной области, а другой —
взаимодействия с внепроцессной зависимостью.

- Использование времени в виде неявного контекста загрязняет рабочий код и усложняет тестирование. Внедряйте время в виде
явной зависимости — либо сервиса, либо простого значения. Там, где это возможно, отдавайте предпочтение простым значениям.