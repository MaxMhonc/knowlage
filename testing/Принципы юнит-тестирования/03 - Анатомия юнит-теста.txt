- Все юнит-тесты должны строиться по схеме AAA: подготовка (Arrange), действие (Act), проверка (Assert).
Если тест состоит из нескольких секций подготовки, действий или проверки, это указывает на то, что тест проверяет сразу
несколько единиц поведения. Если этот тест — юнит-тест, разбейте его на несколько тестов: по одному для каждого действия.

- Секция действия, содержащая более одной строки, — признак проблем с API тестируемой системы.
Клиент должен не забывать выполнять эти действия совместно, чтобы не привести к нарушению логической целостности.
Такие нарушения называются нарушениями инвариантов.
Защита вашего кода от потенциальных нарушений инвариантов называется инкапсуляцией.

- Чтобы выделить тестируемую систему в тестах, присвойте ей имя sut. Чтобы разделить три секции теста, либо включите в
них соответствующий комментарий (Arrange, Act, Assert), либо вставьте пустые строки между секциями.

- Переиспользование кода инициализации тестовых данных должно осущест- вляться с помощью фабричных методов
(вместо конструктора тест-класса). Такой подход поддерживает изоляцию между тестами и улучшает читаемость.

- Не используйте жесткую структуру именования тестов. Присваивайте имена тестам так, как если бы вы описывали сценарий
непрограммисту, знакомому с предметной областью. Разделяйте слова в имени подчеркиваниями и не включайте имя
тестируемого метода в название теста.

- Параметризованные тесты помогают сократить объем кода, необходимого для похожих тестов.
Недостаток параметризованных тестов — ухудшение читаемости, так как тесты становятся более общими.

- Assertion-библиотеки помогают улучшить читаемость кода за счет реструктури- зации порядка слов в проверках в тестах.
