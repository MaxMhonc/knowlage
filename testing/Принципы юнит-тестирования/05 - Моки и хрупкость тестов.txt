- Тестовая заглушка — общий термин, описывающий любые разновидности фиктивных зависимостей в тестах.
Существуют пять типов тестовых заглушек (пу- стышки, стабы, шпионы, моки и фейки), которые можно разбить на две категории:
моки и стабы. Шпионы функционально эквивалентны мокам; пустышки и фейки делают то же, что и стабы.

- Моки помогают эмулировать и проверять выходные взаимодействия — вызовы, совершаемые тестируемой системой
к ее зависимостям для изменения их состоя- ния. Стабы помогают эмулировать входные взаимодействия — вызовы, совершаемые
тестируемой системой к ее зависимостям для получения входных данных.

- Мок-инструмент — класс мок-библиотеки, который может использоваться для создания мока — тестовой заглушки или стаба.

- Проверка взаимодействий со стабами делает тесты хрупкими. Такое взаимодействие не имеет отношения к конечному результату;
это всего лишь промежуточ- ный шаг на пути к такому результату, деталь имплементации.

- Принцип CQS (command query separation) утверждает, что каждый метод должен быть либо командой, либо запросом,
но не и тем и другим одновременно. Тестовые заглушки, заменяющие команды, становятся моками. Тестовые заглушки,
заменяющие запросы, становятся стабами.

- Весь рабочий код может быть классифицирован по двум измерениям: на пу- бличные и приватные API, а также на наблюдаемое
поведение и детали импле- ментации. Публичностью кода управляют модификаторы доступа
(например, ключевые слова public, private и internal). Код является частью наблюдаемого поведения системы, если он
удовлетворяет одному из следующих требований (весь прочий код относится к деталям имплементации):
    • он предоставляет операцию, которая помогает клиенту достичь одну из его целей. Операция — метод,
    который выполняет вычисление и/или создает побочный эффект;
    • он предоставляет доступ к состоянию системы, которое помогает клиенту достичь одну из его целей.
    Состояние — текущее состояние системы.

- В хорошо спроектированном коде наблюдаемое поведение совпадает с публич- ным API, тогда как все детали имплементации
скрываются за приватным API. Утечка деталей имплементации происходит тогда, когда публичный API систе- мы выходит за
рамки наблюдаемого поведения и начинает раскрывать детали имплементации.

- Инкапсуляцией называется защита вашего кода от нарушений инвариантов. Раскрытие деталей имплементации часто приводит к
нарушению инкапсуляции, потому что клиенты могут использовать детали имплементации, чтобы обойти инварианты кода.

- Гексагональная архитектура состоит из набора взаимодействующих приложений, изображаемых в виде гексагонов (шестиугольников).
Каждый гексагон состоит из двух слоев: предметной области и сервисов приложений.

- Гексагональная архитектура подчеркивает три важных принципа:
    • разделение обязанностей между слоем предметной области и слоем сервисов приложения.
    Слой предметной области должен отвечать только за бизнес- логику, тогда как слой сервисов приложения должен
    координировать работу между слоем предметной области и внешними приложениями;
    • взаимодействия внутри приложения должны быть однонаправленными — от слоя сервисов приложения к слою предметной области.
    Доменные классы должны зависеть только друг от друга, они не должны зависеть от классов слоя сервисов приложения;
    • внешние приложения связываются с вашим приложением через общий интерфейс, поддерживаемый слоем сервисов приложения.
    Никто не может обращаться напрямую к слою предметной области.

- Каждый слой приложения имеет наблюдаемое поведение и содержит собствен- ный набор деталей имплементации.

- В приложениях встречаются взаимодействия двух видов: внутрисистемные и межсистемные.
Внутрисистемные взаимодействия связывают классы вашего
приложения. Межсистемные взаимодействия — это когда ваше приложение
общается с другими приложениями.

- Внутрисистемные взаимодействия являются деталями имплементации. Меж- системные взаимодействия являются частью наблюдаемого
поведения — за исключением внешних систем, доступных только через ваше приложение. Взаимодействия с такими системами
также являются деталями имплементации, потому что порождаемые ими побочные эффекты не видны извне.

- Использование моков для проверки внутрисистемных взаимодействий делает тесты хрупкими. Моки должны использоваться только
для межсистемных вза- имодействий (взаимодействий, выходящих за границу приложения) и только когда эффекты таких взаимодействий
видны внешнему миру.
